# -*- coding: utf-8 -*-
"""Agente RECEITAS-REMIX.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11TfERr534aIXIN2ScJ1V45_FYpUdwmU_
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Pergunta ao Gemini uma informação mais recente que seu conhecimento

from IPython.display import HTML, Markdown

# Perguntar pro modelo quando é a próxima temporada de master chef
resposta = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando é a proxima temporada de masterchef brasil?',
)


# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {resposta.text}"))

# Pergunta ao Gemini uma informação utilizando a busca do Google como contexto

response = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando é a proxima temporada de masterchef brasil?',
    config={"tools": [{"google_search": {}}]}
)

# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {response.text}"))

# Exibe a busca
print(f"Busca realizada: {response.candidates[0].grounding_metadata.web_search_queries}")
# Exibe as URLs nas quais ele se baseou
print(f"Páginas utilizadas na resposta: {', '.join([site.web.title for site in response.candidates[0].grounding_metadata.grounding_chunks])}")
print()
display(HTML(response.candidates[0].grounding_metadata.search_entry_point.rendered_content))

# Instalar Framework ADK de agentes do Google

!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

# --- Agente 1: Pesquisador de Receitas --- #
def agente_pesquisador(ingredientes, dificuldade, dias_da_semana, tempo_de_preparo, restricao):
    pesquisador = Agent(
        name="agente_pesquisador",
        model="gemini-2.0-flash",
        instruction="""
        Você é um assistente de pesquisa especializado em gastronomia. A sua tarefa é utilizar a ferramenta de busca do google (google_search) para pesquisar receitas de
        comida simples e criativas para o almoço com base nos ingredientes (ingredientes) listados, além da dificildade (dificuldade) escolhida. Deve levar em consideração o
        tempo de preparo (tempo_de_preparo) e também se o usuário tem alguma restrição (restricao) alimentar. A quantidade de receitas pesquisadas será determinada pela quantidade
        de dias da semana (dias_da_semana).
        """,
        description="Agente que pesquisa receitas de comida",
        tools=[google_search]
    )

    entrada_do_agente_pesquisador = f"Ingredientes: {ingredientes}\nDificuldade: {dificuldade}\nDias da semana: {dias_da_semana}\nTempo de preparo: {tempo_de_preparo}\nRestrição alimentar: {restricao}"
    receitas = call_agent(pesquisador, entrada_do_agente_pesquisador)
    return receitas

# --- Agente 2: Planejador de cardápio --- #
def agente_planejador(dias_da_semana, receitas_buscadas):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        instruction="""
        Você é um planejador de cardápios. Com base na lista de receitas buscadas você deve montar um cardápio equilibrado e simples de almoço com
        base nos dias da semana (dias_da_semana) indicados. Ao final, o cardápio deve estar escrito em formato de tabela para facilitar a visualização.
        """,
        description="Agente que planeja o cardápio",
    )

    entrada_do_agente_planejador = f"Dias da semana: {dias_da_semana}\nReceitas buscadas: {receitas_buscadas}"
    # Executa o agente
    plano_do_cardapio = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_cardapio

# Título do projeto
print("🥗​ RECEITAS REMIX 🥘​")
print("🥗​ Criação de cardápios para almoço 🥘​")
print("\n")

# Obtém as informações do usuário
ingredientes = input("❓ Por favor, digite os INGREDIENTES de sua preferência para elaboração do cardápio: ")
print("\n")
dificuldade = input("❓ Agora, digite a DIFICULDADE da receita (fácil, médio ou difícil): ")
print("\n")
dias_da_semana = input("❓ Em seguida, digite a QUANTIDADE de dias da semana que irá cozinhar:")
print("\n")
tempo_de_preparo = input("❓ Por favor, digite o TEMPO DE PREPARO da receita (em minutos): ")
print("\n")
restricao = input("❓ Por fim, informe se há alguma RESTRIÇÃO ALIMENTAR (vegana, vegetariana, sem restrição...): ")
print("\n")

# Lógica do sistema de agentes
if not ingredientes:
  print("Por favor, insira todas as informações!")
else:
  print(f"Ótimo, vamos criar um cardápio prático para ajudá-lo(a) no dia-a-dia!🍴 ")

receitas = agente_pesquisador(ingredientes, dificuldade, dias_da_semana, tempo_de_preparo, restricao)
print("\n Receitas encontradas! 🍲 ")
display(to_markdown(receitas))

plano_do_cardapio = agente_planejador(dias_da_semana, receitas)
display(to_markdown(plano_do_cardapio))